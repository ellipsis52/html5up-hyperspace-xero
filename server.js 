const express = require("express");
const fetch = require("node-fetch");

const app = express();

app.get("/callback", async (req, res) => {
  const { code } = req.query;
  if (!code) return res.status(400).send("Missing authorization code.");

  const tokenEndpoint = "https://mylogin.netmanagement.online/oauth/token";

  try {
    const response = await fetch(tokenEndpoint, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        grant_type: "authorization_code",
        client_id: process.env.CLIENT_ID,
        client_secret: process.env.CLIENT_SECRET,
        code,
        redirect_uri: "https://netmanagement.online/callback"
      })
    });

    const data = await response.json();

    if (data.access_token) {
      return res.redirect("https://go.xero.com/app/!Jr4B8/dashboard");
    } else {
      return res.status(401).json({ error: "Auth failed", details: data });
    }
  } catch (err) {
    return res.status(500).json({ error: "Internal server error", message: err.message });
  }
});

module.exports = app;
// server.js ou app.js

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3000;

app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public')); // Pour servir signup.html et autres assets

// Endpoint pour gérer l'inscription
app.post('/api/signup', (req, res) => {
  const { fullname, email, password } = req.body;

  // Ici, tu peux ajouter validation, vérification en base, hachage mot de passe, etc.
  if (!fullname || !email || !password) {
    return res.status(400).json({ success: false, message: 'Tous les champs sont requis.' });
  }

  // Simuler réussite inscription (en vrai, ajoute logique DB, email, etc.)
  console.log(`Nouvel inscrit : ${fullname} (${email})`);

  return res.json({ success: true, message: 'Inscription réussie !' });
});

app.listen(port, () => {
  console.log(`Serveur démarré sur http://localhost:${port}`);
});
import express from 'express';
import session from 'express-session';
import jwt from 'express-jwt';
import jwksRsa from 'jwks-rsa';
import cookieParser from 'cookie-parser';
import dotenv from 'dotenv';

dotenv.config();

const app = express();
const port = process.env.PORT || 3000;

// Configurations OAuth et session
const AUTH0_DOMAIN = process.env.AUTH0_DOMAIN; // ex: mylogin.netmanagement.online
const AUTH0_AUDIENCE = process.env.AUTH0_AUDIENCE; // ex: https://netmanagement.online/api
const SESSION_SECRET = process.env.SESSION_SECRET || 'unSecretMagiqueEtLong';

// Middleware
app.use(express.json());
app.use(cookieParser());
app.use(session({
  secret: SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000, // 1 jour
  }
}));

// Validation JWT via JWKS d’Auth0
const checkJwt = jwt({
  secret: jwksRsa.expressJwtSecret({
    cache: true,
    rateLimit: true,
    jwksRequestsPerMinute: 5,
    jwksUri: `https://${AUTH0_DOMAIN}/.well-known/jwks.json`
  }),
  audience: AUTH0_AUDIENCE,
  issuer: `https://${AUTH0_DOMAIN}/`,
  algorithms: ['RS256']
});

// Route publique
app.get('/', (req, res) => {
  res.send('Bienvenue dans la galaxie sécurisée de Netmanagement.online');
});

// Route d’authentification — on valide token et crée session
app.post('/api/login', checkJwt, (req, res) => {
  // Le token est valide ici
  req.session.user = {
    sub: req.user.sub,
    email: req.user['https://netmanagement.online/email'] || req.user.email,
    name: req.user.name || '',
  };
  res.json({ success: true, message: 'Session créée avec éclat !' });
});

// Middleware pour protéger routes
function requireAuth(req, res, next) {
  if (req.session.user) {
    next();
  } else {
    res.status(401).json({ success: false, message: 'Accès interdit : connecte-toi d’abord.' });
  }
}

// Route protégée exemple
app.get('/api/dashboard', requireAuth, (req, res) => {
  res.json({ message: `Bienvenue, ô voyageur ${req.session.user.name || req.session.user.email}` });
});

// Déconnexion
app.post('/api/logout', (req, res) => {
  req.session.destroy();
  res.json({ success: true, message: 'Session terminée, au revoir voyageur.' });
});

app.listen(port, () => {
  console.log(`Serveur stellaire lancé sur le port ${port}`);
});
